/* ----------------------- ARRAYS ----------------------- */
// Arrays -> Un array es una estructura de datos que almacena una colecci√≥n de elementos en una sola variable. Estos elementos pueden ser n√∫meros, strings, objetos, funciones o incluso otros arrays.
// Son objetos que guardan datos, los que no esten definidos quedan como undefined



// Arrays - Arreglos - Listas -> posibilidad de agrupar una lista de datos (boleanos, numbers, string) o por ejemplo una lista de empleados, precios, etc... no hace falta que enumere uno por uno. Son estructuras que nos permiten agrupar datos. Nos permite tener mayor caudal de informacion. 
// Utilizan [] -> indica que adentro va un array una lista, y separa a cada item de la lista con una coma (,) menos el √∫ltimo item de la lista.
//Las listas pueden ser de cualquier tipo de dato.
/*
Las listas se pueden modificar y perder si usamos por ejemplo: 
"let listaAlumno= ["Daniel", "Julia", "Nicolas"];
Luego mas adelante si nos olvidamos de esta variable y la volvemos a usar listaAlumno para otra varibale y perdemos el array. Con un Const nos tira error directamente, pero si se puede modificar aunque sea un const porque es una lista, el contenido se puede modificar, agregar, sacar pero sigue siendo una lista.
*/
// El largo de la lista siempre es un numero mas que el indice mas grande que tiene, Ejemplo: nos marca 5 en consola, son 5 items pero se cuentan del 0,1,2,3,4

arrays = ["daniel", 25, "Cordoba"]
console.log(arrays[1])
//           0          1         2
frutas = ["banana", "manzanas", "pera"];
console.log(frutas)
// Para mostrar un elemento -> los arrays comienzan desde la posicion 0
console.log(frutas.slice(0, 2)) // Extrae desde el √≠ndice 0 hasta el 1 (sin incluir el 2)

// Arrays Asociativos -> son objetos, son objetos con valores asociados.

let pc1 = {
    nombre: "DaniPc",
    procesador: "I5",
    Ram: "24 Gb",
    espacio: "512gb"
};


let pc2 = ["DaniPc", "I5", "24Gb", "512 Gb"];
console.log(pc2[0], pc2[1]);

console.log(pc1)
console.log(pc1["nombre"]) // nos dice que es un objeto, si queremos saber por ejemplo el nombre de la pc tenemos que poner: console.log(pc1["nombre"])

let nombre = pc1["nombre"];
let procesador = pc1["procesador"];
let ram = pc1 ["Ram"];
let espacio = pc1 ["espacio"];

frase = `
    el nombre de mi pc es: ${nombre} <br>
    el procesador es: ${procesador} <br>
    la ram es de: ${ram}
    el espacio en disco es de: ${espacio}`;
console.log(frase)


/* ----------------------- Bucles e Iteraci√≥n ----------------------- */

// Definicion y Usos: los bucles son como un If, pero se la pasan preguntando todo el tiempo lo mismo
//Un bucle (o loop) es una estructura de control en programaci√≥n que permite ejecutar repetidamente un bloque de c√≥digo mientras se cumpla una condici√≥n espec√≠fica. La iteraci√≥n, por otro lado, se refiere a cada ejecuci√≥n individual del bucle.
// Los bucles son fundamentales en la computaci√≥n, ya que permiten la automatizaci√≥n de tareas repetitivas, la manipulaci√≥n de estructuras de datos y la optimizaci√≥n del rendimiento de los algoritmos.





// ----------------------- Sentencia WHILE: el while pregunta siempre hasta que la condicion de falsa. Este bucle se ejecuta mientras una condici√≥n sea verdadera. Se usa cuando no sabemos cu√°ntas veces se repetir√° la acci√≥n.


// Sintaxis:

// while (condici√≥n) {
//  Bloque de c√≥digo que se ejecuta mientras la condici√≥n sea verdadera
// }


//Funcionamiento:

// La condici√≥n se eval√∫a antes de cada iteraci√≥n.
// Si es true, el bloque de c√≥digo se ejecuta.
// Si es false, el bucle termina y el programa sigue con el siguiente c√≥digo.


// Ejemplo: 
let contador = 1;

while (contador <= 5) {
    console.log("Iteraci√≥n n√∫mero: " + contador);
    contador++; // Incrementamos el contador para evitar un bucle infinito
}

// Explicaci√≥n:

// Se inicializa contador = 1.
// La condici√≥n contador <= 5 es true, entonces el c√≥digo dentro del while se ejecuta.
// Se imprime el mensaje y luego contador++ incrementa el valor de contador.
// Cuando contador llega a 6, la condici√≥n es false y el bucle termina

// Ejemplo 2:
// Pedir al usuario un n√∫mero v√°lido. Los bucles while son √∫tiles cuando queremos validar entradas del usuario hasta que ingrese un dato correcto.

//let edad = prompt("Ingrese su edad:");

// while (edad < 0 || isNaN(edad)) {
// edad = prompt("Edad inv√°lida. Ingrese nuevamente su edad:");
// }

//console.log("Edad ingresada correctamente:", edad);

// Explicaci√≥n:

// Se solicita un n√∫mero al usuario.
// Si el usuario ingresa un n√∫mero negativo o un valor inv√°lido (isNaN), el while se repite.
// Cuando se ingresa un n√∫mero v√°lido, el bucle finaliza.

// El bucle while es √∫til cuando desconocemos la cantidad exacta de iteraciones y queremos repetir una acci√≥n hasta que se cumpla una condici√≥n. Sin embargo, es importante evitar bucles infinitos asegur√°ndonos de que la condici√≥n eventualmente se vuelva falsa. üöÄ




// ----------------------- Sentencia DO WHILE:

//La sentencia do...while es una estructura de control de flujo en JavaScript que permite ejecutar un bloque de c√≥digo al menos una vez, independientemente de si la condici√≥n es verdadera o falsa. Posteriormente, el bucle seguir√° iterando mientras la condici√≥n especificada contin√∫e siendo verdadera.

// El do...while se usa en situaciones en las que se necesita ejecutar una acci√≥n antes de evaluar la condici√≥n, como cuando se desea garantizar que una entrada de usuario se procese al menos una vez.

// Sintaxis del Bucle do...while:

// do {
//     // Bloque de c√≥digo que se ejecuta al menos una vez
// } while (condici√≥n);

// Explicaci√≥n:

// Se ejecuta el bloque de c√≥digo dentro del do {} sin evaluar la condici√≥n.
// Luego, la condici√≥n dentro del while() se eval√∫a.
// Si la condici√≥n es true, el bucle se repite.
// Si la condici√≥n es false, el bucle se detiene.

// Ejemplo: 
let numero = 1;

do {
    console.log("Iteraci√≥n n√∫mero: " + numero);
    numero++; // Incrementamos la variable
} while (numero <= 3);

// Explicaci√≥n:

// Primera iteraci√≥n: Se ejecuta console.log("Iteraci√≥n n√∫mero: 1") sin evaluar la condici√≥n.
// Se incrementa numero a 2 y se eval√∫a numero <= 5. Como es true, el bucle se repite.
// Cuando numero llega a 6, la condici√≥n es false y el bucle finaliza.



// Diferencia entre Do While y While ->

// Do While -> 
// Evaluaci√≥n de la condici√≥n: Despu√©s de ejecutar el bloque de c√≥digo. 
// Ejecuci√≥n m√≠nima garantizada: Se ejecuta al menos una vez, incluso si la condici√≥n es false. 
// Uso recomendado: Cuando se necesita ejecutar el c√≥digo al menos una vez antes de evaluar la condici√≥n.

// While -> 
// Evaluaci√≥n de la condici√≥n: Antes de ejecutar el bloque de c√≥digo. 
// Ejecuci√≥n m√≠nima garantizada: Puede que no se ejecute ninguna vez si la condici√≥n es false desde el inicio. 
// Uso recomendado: Cuando se necesita evaluar la condici√≥n antes de ejecutar el c√≥digo.

// Aplicaciones Pr√°cticas del Bucle do...while
// Validaci√≥n de Entrada del Usuario: Cuando queremos asegurarnos de que el usuario ingrese un valor v√°lido antes de evaluar si la entrada es correcta.

// let edad;

// do {
//     edad = prompt("Ingrese su edad (debe ser un n√∫mero v√°lido):");
// } while (isNaN(edad) || edad <= 0 || edad > 120);

// console.log("Edad ingresada correctamente:", edad);


// Explicaci√≥n:

// El prompt() se ejecuta al menos una vez.
// Si el usuario ingresa algo incorrecto (NaN o un n√∫mero negativo), se vuelve a pedir la edad.

//Generaci√≥n de N√∫meros Aleatorios hasta Cumplir una Condici√≥n

let numeroAleatorio;

do {
    numeroAleatorio = Math.floor(Math.random() * 10);
    console.log("N√∫mero generado:", numeroAleatorio);
} while (numeroAleatorio !== 7);

// Explicaci√≥n: Se genera un n√∫mero aleatorio entre 0 y 9. Se repite hasta que salga 7.

// Conclusi√≥n
// El bucle do...while en JavaScript es una estructura de control ideal cuando se necesita ejecutar un bloque de c√≥digo al menos una vez, sin importar si la condici√≥n inicial es verdadera o falsa. Su principal diferencia con while es que en do...while, la condici√≥n se eval√∫a despu√©s de la primera ejecuci√≥n, lo que garantiza que el c√≥digo dentro del bloque se ejecute al menos una vez.

// Este bucle es √∫til para validaci√≥n de entradas de usuario, simulaciones, y procesos que requieren una ejecuci√≥n inicial antes de validar una condici√≥n. Sin embargo, si no se maneja correctamente, puede generar bucles infinitos si la condici√≥n nunca se vuelve falsa.








// ----------------------- Sentencia FOR: 
// Es un bucle igual que el while pero es determinado. Se ejecutan las veces nosotros le digamos. El bucle for es una estructura de control de flujo en JavaScript que permite ejecutar un bloque de c√≥digo un n√∫mero determinado de veces. Es ideal cuando se conoce de antemano cu√°ntas iteraciones deben realizarse. Se usa com√∫nmente para recorrer arrays, listas y ejecutar tareas repetitivas de manera eficiente.

// Partes / Parametros del bucle -> declaracion e inicializaci√≥n, condici√≥n, aumento - decremento

for (let i = 1; i <= 5; i++) {
    console.log("Iteraci√≥n n√∫mero en FOR: " + i);
}

// let i = 1; ‚Üí Se inicializa la variable i con el valor 1.
// i <= 5; ‚Üí Se verifica la condici√≥n. Mientras sea true, el c√≥digo dentro del for se ejecuta.
// i++ ‚Üí Se incrementa i despu√©s de cada iteraci√≥n.
// Cuando i llega a 6, la condici√≥n es false y el bucle finaliza.

// Explicaci√≥n de los par√°metros:
// Inicializaci√≥n: Se ejecuta una sola vez al inicio del bucle. Se suele usar para declarar e inicializar una variable de control.
// Condici√≥n: Se eval√∫a antes de cada iteraci√≥n. Si es true, el c√≥digo dentro del for se ejecuta. Si es false, el bucle termina.
// Actualizaci√≥n: Se ejecuta despu√©s de cada iteraci√≥n. Generalmente se usa para incrementar o modificar la variable de control.

// Ejemplo ->

let frutas2 = ["Manzana", "Banana", "Naranja", "Uva"];

for (let i = 0; i < frutas2.length; i++) {
    console.log("Fruta: " + frutas2[i]);
}
// frutas.length devuelve la cantidad de elementos en el array.
// i < frutas.length garantiza que el bucle se detiene despu√©s de recorrer todos los elementos.
// frutas[i] permite acceder a cada elemento del array.

//Ejemplo cuenta regresiva ->

for (let i = 6; i >= 0; i--){
    console.log("Cuenta regresiva con bucle For " + i);
}

for (let i = 0; i < 20; i++) {
    if(i == 12) {
        break
    }
    console.log("for con un Break " + i)
}







// ----------------------- Sentencia FOR IN:
// El bucle for...in en JavaScript es una estructura de control que permite recorrer las propiedades enumerables de un objeto. Se utiliza principalmente para iterar sobre las claves de un objeto y acceder a sus valores asociados.

// Sintaxis: 
// for (let clave in objeto) {
     // Bloque de c√≥digo que se ejecutar√° en cada iteraci√≥n
// }

// Explicaci√≥n:

// clave ‚Üí Representa el nombre de cada propiedad del objeto.
// objeto ‚Üí Es el objeto que se recorrer√°.
// En cada iteraci√≥n, clave toma el valor de una propiedad del objeto y el c√≥digo dentro del bloque se ejecuta.

// Ejemplo -> 

let animales = ["gato", "perro", "pajaro"];

for (animal in animales){
    console.log(animal)
}
// Animal va a ser igual a la posicion de cada uno de los valores -> gato[0], perro[1], pajaro[2]; nos da el indice en el que esta los elementos,
// Para que los muestre deberia ser
for (animal in animales) {
    console.log("Para que nos muestre con un IN " + animales[animal])
}

// Conclusi√≥n
// El bucle for...in en JavaScript es una herramienta poderosa para recorrer propiedades de objetos, permitiendo acceder din√°micamente a sus valores.

// üîπ Cu√°ndo usar for...in:
// ‚úÖ Cuando se trabaja con objetos y se necesita iterar sobre sus propiedades.

// ‚ö† Cu√°ndo NO usar for...in:
// ‚ùå Para recorrer arrays, ya que devuelve los √≠ndices en lugar de los valores y puede incluir propiedades no deseadas. Para arrays, se recomienda for, forEach() o for...of.








// ----------------------- Sentencia FOR OF:
// Nos muestra el valor de los elementos, recorre el array

for (animal of animales){
    console.log(animal)
}









// ----------------------- Sentencia break: Un break termina la sentencia

let numero2 = 0;

while(numero2 < 15) {
    numero2++;
    console.log(numero2);
    if (numero2 == 10) {
        break; // cuando el break se ejecuta el bucle sale.
    }
}

console.log("Fin del bucle por el break")




// ----------------------- Sentencia label:
// Nos permite asociar un bucle (excepto ForEach) a un nombre para poder terminarlo cuando queramos
// Ejemplo si tenemos un array dentro de una array
// En JavaScript, la sentencia label (etiqueta) es una estructura que permite asignar un identificador a un bloque de c√≥digo o a un bucle. Su prop√≥sito principal es facilitar el uso de las instrucciones break y continue en estructuras anidadas, permitiendo romper o continuar un bloque de c√≥digo espec√≠fico.

// Una etiqueta se define anteponiendo un nombre seguido de dos puntos (:) antes del bloque de c√≥digo o del bucle al que se quiere hacer referencia.


// Sintaxis -> nombreEtiqueta: 
            // instrucci√≥n;

// Ejemplo -> 
etiquetaBucle: 
for (let i = 0; i < 5; i++) {
    for (let j = 0; j < 5; j++) {
        if (j === 3) {
            break etiquetaBucle; // Rompe el bucle etiquetado
        }
        console.log(`i: ${i}, j: ${j}`);
    }
}
//Explicaci√≥n -> La etiqueta etiquetaBucle marca el inicio del bucle externo Cuando j === 3, la instrucci√≥n break etiquetaBucle; rompe directamente el bucle externo, no solo el interno.


// Usos ->  Usos de la Sentencia label:

// La sentencia label se utiliza principalmente en los siguientes casos:
// Romper m√∫ltiples bucles anidados con break.
// Saltar iteraciones espec√≠ficas en bucles anidados con continue.
// Facilitar la lectura y manipulaci√≥n de estructuras de control complejas.

//Ejemplo con break y label
// Cuando se usa break dentro de un bucle anidado sin etiqueta, solo rompe el bucle m√°s interno. Con label, podemos romper un bucle espec√≠fico.
outerLoop: 
for (let i = 0; i < 3; i++) {
    for (let j = 0; j < 3; j++) {
        console.log(`i: ${i}, j: ${j}`);
        if (i === 1 && j === 1) {
            break outerLoop; // Rompe el bucle etiquetado
        }
    }
}
// Explicaci√≥n: break outerLoop; rompe el bucle externo outerLoop, no solo el interno.
// Sin la etiqueta, break solo saldr√≠a del bucle m√°s interno.


// Ejemplo con continue y label -> Continue en combinaci√≥n con label permite saltar a la siguiente iteraci√≥n de un bucle externo, evitando que se ejecuten instrucciones en iteraciones espec√≠ficas.

outerLoop: 
for (let i = 0; i < 3; i++) {
    for (let j = 0; j < 3; j++) {
        if (i === 1 && j === 1) {
            console.log("Saltando la iteraci√≥n con i = 1 y j = 1");
            continue outerLoop; // Salta a la siguiente iteraci√≥n del bucle externo
        }
        console.log(`i: ${i}, j: ${j}`);
    }
}
// Explicaci√≥n -> Cuando i === 1 && j === 1, la instrucci√≥n continue outerLoop; hace que la iteraci√≥n actual del bucle externo se detenga y pase a la siguiente iteraci√≥n de i.
// Sin label, continue solo afectar√≠a al bucle m√°s interno.

//Caracter√≠stica: break -> Funci√≥n: Termina un bucle. Afecta a Solo al bucle actual (o etiquetado). Uso con label Permite romper un bucle externo.

//Caracter√≠stica: continue -> Funci√≥n: 	Salta una iteraci√≥n. Afecta a Solo al bucle actual (o etiquetado). Uso con label Permite saltar iteraciones de un bucle externo.

//Caracter√≠stica: label -> Funci√≥n: Define un identificador para un bloque de c√≥digo. Afecta a Cualquier bloque o bucle. Uso con label Se usa para referenciar bloques de c√≥digo.

// Conclusi√≥n
// La sentencia label en JavaScript es una herramienta avanzada que permite identificar bloques de c√≥digo y referenciarlos en instrucciones break o continue.

// üîπ Cu√°ndo usar label:
// ‚úÖ En estructuras anidadas donde es necesario romper o saltar iteraciones de bucles externos.

// üîπ Cu√°ndo evitar label:
// ‚ùå En c√≥digo simple o cuando hay alternativas m√°s claras como funciones auxiliares o return.

// Su uso correcto puede mejorar la eficiencia y claridad del c√≥digo en ciertos escenarios, pero debe utilizarse con precauci√≥n para evitar confusi√≥n y dificultar la depuraci√≥n. üöÄ


// Otro ejemplo -> 

let array1 = ["mar√≠a", "josefa", "roberta"];
let array2 = ["pedro", "marcelo", array1, "josefina"];

forRancio:
for (let array in array2) {  // 'array' representa los √≠ndices (0,1,2,3)
    if (array == 2) {  // Cuando array es 2, accedemos a array1
        for (let array of array1) { // Iteramos sobre ["mar√≠a", "josefa" "roberta"]
            console.log(array); // Escribe "mar√≠a"
            break forRancio;  // Sale de todos los bucles inmediatamente
        }
    } else {
        console.log(array2[array]);
    }
}

// Ejecuci√≥n l√≠nea por l√≠nea:
// array2 se recorre con for...in
// array = 0 ‚Üí "pedro" se imprime.
// array = 1 ‚Üí "marcelo" se imprime.
// array = 2 ‚Üí Se activa el bloque if porque array == 2.
// Se entra en el for...of para recorrer array1
// La primera iteraci√≥n toma "mar√≠a".
// document.write("mar√≠a" + "<br>") imprime "mar√≠a".
// break forRancio; se ejecuta y rompe ambos bucles, por lo que "josefa" y "roberta" no llegan a imprimirse.


//Explicaci√≥n del C√≥digo:

// Se definen dos arreglos:

// array1 con nombres.
// array2, que incluye array1 como su tercer elemento.
// Se usa un bucle for...in para iterar sobre array2, donde array es el √≠ndice de cada elemento.

// Cuando array == 2 (es decir, cuando se accede al tercer elemento de array2, que es array1):

// Se inicia un bucle for...of para iterar sobre array1 y escribir sus elementos en pantalla.
// Luego, se usa break forRancio; para romper ambos bucles y salir completamente del ciclo.
// Si array != 2, se imprime el elemento correspondiente de array2.




// ----------------------- Sentencia continue:
// Ejemplo -> 
for (let i = 0; i < 6; i++) {
    if(i == 4) {
        continue
    }
    console.log("Usando Continue " + i) // salta el numero/dato y continua el bucle
}





/* ----------------------- FUNCIONES ----------------------- */
// Definici√≥n y usos
// Formas de crear funciones y llamarlas ->
// Return ->
// Parametros ->
// Scope ->
// Funciones Flecha ->



